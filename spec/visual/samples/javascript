// vim: ft=javascript

var myFloat = 0.123;
var myOctal = 0x123;
var myRegex = /asdf/;
var myObject = { a: 1, b: 2 }

var ternary = 0 ? 1 : {a : 2 ? d : 3 };
var ternary2 = a ? { b : c } + d : e;
var ternary3 = a ? {
  b : c,
  d: e ? function() {
    // TODO: if myLabel is on the first line, this is interpreted as
    // an object...
    myLabel:
    while(true) {
      break myLabel;
    }
  } + f: g
}

/*!
 * multiline comment
 */

var quotedKeys = {
  "one": 1,
  "two": 2,
  "three": 3,
};

Blag = {};
jQuery.noConflict();

Blag.ReadMore = (function($) {
  function getFold(button) {
    return $(button).siblings('.fold');
  }

  function expand(e) {
    e.preventDefault();

    var self = $(this);

    getFold(self).show();
    self.html('&laquo; less');
  }

  function contract(e) {
    e.preventDefault();

    var self = $(this);

    getFold(self).hide();
    self.html('more &raquo;')
  }

  function init() {
    $('a.read-more').toggle(expand, contract);
  }

  $(document).ready(init);
})(jQuery);

// evil regexes, from pygments

/regexp/.test(foo) || x = [/regexp/,/regexp/, /regexp/, // comment
// comment
/regexp/];
if (/regexp/.test(string))
{/regexp/.test(string);};
x =/regexp/;
x = /regexp/;
if (0</regexp/.exec(string) || 1>/regexp/.exec(string))
x = { u:/regexp/, v: /regexp/ };
foo();/regexp/.test(string); /regexp/.test(string);
if (!/regexp/) foobar();
x = u %/regexp/.exec(string) */regexp/.exec(string) / /regexp/.exec(string);
x = u?/regexp/.exec(string) : v +/regexp/.exec(string) -/regexp/.exec(string);
a = u^/regexp/.exec(string) &/regexp/.exec(string) |/regexp/.exec(string) +~/regexp/.exec(string);
x = /regexp/ /* a comment */ ;
x = /[reg/exp]/;
x = 4/2/i;
x = (a == b) ?/* this is a comment */ c : d;
/// a comment //
a = /regex//2/1; //syntactically correct, returns NaN


var template = "{{current}} of beer on the wall";
var stanza = template.replace(/{{current}}/g, "99 bottles");

/* original examples */

// regex

blah(/abc/);
x = /abc/;
x = /abc/.match;

// math

blah(1/2); //comment
x = 1 / 2 / 3;
x = 1/1/.1;

// broken

x=/1/;
x=1/a/g;
x=a/a/g;

// real-world

var x = 1/(1+Math.sqrt(sum)); // convert to number between 1-0
return Math.round((num / den) * 100)/100;
